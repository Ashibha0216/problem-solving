*/Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb

Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)

You can use the operations on either string as many times as necessary.Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise./*



function closeStrings(word1, word2) {
    if (word1.length !== word2.length) {
        return false;
    }

    // Count the frequency of each character in both strings
    const count1 = getCharacterCount(word1);
    const count2 = getCharacterCount(word2);

    // Check if the character frequencies are the same
    if (compareSets(Object.keys(count1), Object.keys(count2))) {
        // Check if the character frequencies can be rearranged to match
        const freq1 = Object.values(count1).sort();
        const freq2 = Object.values(count2).sort();
        return arraysEqual(freq1, freq2);
    } else {
        return false;
    }
}

function getCharacterCount(word) {
    const count = {};
    for (const char of word) {
        count[char] = (count[char] || 0) + 1;
    }
    return count;
}

function compareSets(set1, set2) {
    return set1.length === set2.length && set1.every(value => set2.includes(value));
}

function arraysEqual(arr1, arr2) {
    return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);
}

// Example usage:
const word1 = "abc";
const word2 = "bca";
const result = closeStrings(word1, word2);
console.log(result);  // Output: true

